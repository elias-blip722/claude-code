// Prisma Schema for Two-Way Referral Management System
// This schema includes all tables for the referral system with Google Drive integration

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// USER MANAGEMENT
// ============================================

enum UserRole {
  ADMIN
  STAKEHOLDER
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  hashedPassword    String?  // Nullable for OAuth-only accounts
  name              String
  role              UserRole @default(STAKEHOLDER)
  isActive          Boolean  @default(true)
  emailVerified     Boolean  @default(false)

  // OAuth fields
  googleId          String?  @unique
  microsoftId       String?  @unique

  // Security
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  failedLoginAttempts Int    @default(0)
  lockedUntil       DateTime?
  lastPasswordChange DateTime?

  // Metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  lastLoginIp       String?

  // Relations
  submissions       Submission[]
  comments          Comment[]
  statusChanges     StatusHistory[]
  assignedSubmissions Submission[] @relation("AssignedTo")
  notifications     Notification[]
  sessions          Session[]
  auditLogs         AuditLog[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Session {
  id            String   @id @default(uuid())
  userId        String
  token         String   @unique
  refreshToken  String?  @unique
  expiresAt     DateTime
  ipAddress     String?
  userAgent     String?
  deviceFingerprint String?
  createdAt     DateTime @default(now())
  lastActivity  DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

// ============================================
// REFERRAL SUBMISSIONS
// ============================================

enum SubmissionStatus {
  RED    // Not yet reviewed - requires attention
  AMBER  // Under review - being processed
  GREEN  // Completed - resolved
}

enum SubmissionPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Submission {
  id                  String            @id @default(uuid())
  referenceId         String            @unique // User-friendly ID like REF-001234

  // Submission details
  title               String
  description         String            @db.Text
  status              SubmissionStatus  @default(RED)
  priority            SubmissionPriority @default(MEDIUM)

  // User relationships
  userId              String
  assignedToId        String?

  // Google Drive integration
  googleDriveFolderId String?
  googleDriveFolderUrl String?
  driveSyncStatus     DriveSyncStatus   @default(PENDING)
  lastDriveSyncAt     DateTime?
  driveSyncError      String?           @db.Text
  driveSyncRetries    Int               @default(0)

  // Metadata
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  completedAt         DateTime?
  archivedAt          DateTime?

  // Relations
  user                User              @relation(fields: [userId], references: [id])
  assignedTo          User?             @relation("AssignedTo", fields: [assignedToId], references: [id])
  files               File[]
  comments            Comment[]
  statusHistory       StatusHistory[]
  tags                SubmissionTag[]

  @@index([userId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
  @@index([createdAt])
  @@index([referenceId])
  @@index([driveSyncStatus])
  @@map("submissions")
}

// ============================================
// FILE MANAGEMENT
// ============================================

enum DriveSyncStatus {
  PENDING
  SYNCING
  SYNCED
  FAILED
}

model File {
  id                  String            @id @default(uuid())
  submissionId        String

  // File details
  filename            String
  originalFilename    String
  filePath            String            // S3 or local storage path
  fileSize            Int               // in bytes
  mimeType            String

  // Google Drive integration
  googleDriveId       String?           @unique
  googleDriveUrl      String?
  driveSyncStatus     DriveSyncStatus   @default(PENDING)
  driveSyncAttempts   Int               @default(0)
  lastDriveSyncAt     DateTime?
  driveSyncError      String?           @db.Text

  // Security
  virusScanStatus     String            @default("pending") // pending, clean, infected, error
  virusScanResult     String?           @db.Text
  virusScanAt         DateTime?

  // Metadata
  uploadedAt          DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  deletedAt           DateTime?         // Soft delete

  // Relations
  submission          Submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  driveSyncLogs       DriveSyncLog[]

  @@index([submissionId])
  @@index([driveSyncStatus])
  @@index([virusScanStatus])
  @@index([googleDriveId])
  @@map("files")
}

// ============================================
// GOOGLE DRIVE SYNC LOGGING
// ============================================

enum DriveSyncAction {
  UPLOAD
  UPDATE
  DELETE
  RETRY
}

model DriveSyncLog {
  id                String            @id @default(uuid())
  fileId            String?

  // Action details
  action            DriveSyncAction
  status            String            // success, failed
  errorMessage      String?           @db.Text
  errorStack        String?           @db.Text

  // Request details
  requestId         String?           // For tracking/debugging
  attemptNumber     Int               @default(1)
  durationMs        Int?              // How long the operation took

  // Metadata
  createdAt         DateTime          @default(now())

  // Relations
  file              File?             @relation(fields: [fileId], references: [id], onDelete: SetNull)

  @@index([fileId])
  @@index([status])
  @@index([createdAt])
  @@map("drive_sync_logs")
}

// ============================================
// COMMENTS & COMMUNICATION
// ============================================

model Comment {
  id                String            @id @default(uuid())
  submissionId      String
  userId            String

  // Comment details
  content           String            @db.Text
  isInternal        Boolean           @default(false) // Only visible to admins

  // Metadata
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  deletedAt         DateTime?         // Soft delete

  // Relations
  submission        Submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  user              User              @relation(fields: [userId], references: [id])

  @@index([submissionId])
  @@index([userId])
  @@index([createdAt])
  @@map("comments")
}

// ============================================
// STATUS TRACKING
// ============================================

model StatusHistory {
  id                String            @id @default(uuid())
  submissionId      String
  changedById       String

  // Status change details
  oldStatus         SubmissionStatus
  newStatus         SubmissionStatus
  reason            String?           @db.Text

  // Metadata
  changedAt         DateTime          @default(now())

  // Relations
  submission        Submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  changedBy         User              @relation(fields: [changedById], references: [id])

  @@index([submissionId])
  @@index([changedById])
  @@index([changedAt])
  @@map("status_history")
}

// ============================================
// NOTIFICATIONS
// ============================================

enum NotificationType {
  SUBMISSION_CREATED
  SUBMISSION_UPDATED
  STATUS_CHANGED
  COMMENT_ADDED
  DRIVE_SYNC_FAILED
  ASSIGNMENT_CHANGED
  MENTION
}

model Notification {
  id                String            @id @default(uuid())
  userId            String

  // Notification details
  type              NotificationType
  title             String
  message           String            @db.Text
  link              String?           // Link to relevant resource

  // Metadata
  isRead            Boolean           @default(false)
  readAt            DateTime?
  createdAt         DateTime          @default(now())

  // Relations
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// ============================================
// TAGGING SYSTEM
// ============================================

model Tag {
  id                String            @id @default(uuid())
  name              String            @unique
  color             String            @default("#808080")
  description       String?

  createdAt         DateTime          @default(now())

  submissions       SubmissionTag[]

  @@map("tags")
}

model SubmissionTag {
  submissionId      String
  tagId             String

  createdAt         DateTime          @default(now())

  submission        Submission        @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  tag               Tag               @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([submissionId, tagId])
  @@map("submission_tags")
}

// ============================================
// AUDIT LOGGING
// ============================================

enum AuditAction {
  USER_LOGIN
  USER_LOGOUT
  USER_LOGIN_FAILED
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  SUBMISSION_CREATED
  SUBMISSION_UPDATED
  SUBMISSION_DELETED
  FILE_UPLOADED
  FILE_DOWNLOADED
  FILE_DELETED
  DRIVE_SYNC
  STATUS_CHANGED
  PERMISSION_CHANGED
  SETTINGS_CHANGED
}

model AuditLog {
  id                String            @id @default(uuid())
  userId            String?

  // Action details
  action            AuditAction
  resource          String?           // e.g., "submission:123", "file:456"
  details           Json?             // Additional context

  // Request details
  ipAddress         String?
  userAgent         String?

  // Metadata
  createdAt         DateTime          @default(now())

  // Relations
  user              User?             @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@index([resource])
  @@map("audit_logs")
}

// ============================================
// SYSTEM SETTINGS
// ============================================

model SystemSetting {
  id                String            @id @default(uuid())
  key               String            @unique
  value             Json
  description       String?

  updatedAt         DateTime          @updatedAt

  @@map("system_settings")
}

// ============================================
// EMAIL QUEUE
// ============================================

enum EmailStatus {
  PENDING
  SENDING
  SENT
  FAILED
}

model EmailQueue {
  id                String            @id @default(uuid())

  // Email details
  to                String
  subject           String
  body              String            @db.Text
  htmlBody          String?           @db.Text

  // Status
  status            EmailStatus       @default(PENDING)
  attempts          Int               @default(0)
  lastAttemptAt     DateTime?
  sentAt            DateTime?
  error             String?           @db.Text

  // Metadata
  priority          Int               @default(5) // 1 = highest, 10 = lowest
  scheduledFor      DateTime?
  createdAt         DateTime          @default(now())

  @@index([status])
  @@index([scheduledFor])
  @@index([priority])
  @@map("email_queue")
}
